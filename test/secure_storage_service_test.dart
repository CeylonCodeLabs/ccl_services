import 'package:ccl_services/ccl_services.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

// import 'secure_storage_service_test.mocks.dart'; // Generated by Mockito
//
// Generate the mock file with:
// flutter pub run build_runner build --delete-conflicting-outputs

@GenerateMocks([FlutterSecureStorage])
void main() {
  late MockFlutterSecureStorage mockSecureStorage;
  late SecureStorageService secureStorageService;

  setUp(() {
    mockSecureStorage = MockFlutterSecureStorage();
    secureStorageService = SecureStorageService();
    // Override the defaultInstance with the mock
    // secureStorageService.defaultInstance = mockSecureStorage;
  });

  tearDown(() {
    // Reset Mockito after each test
    reset(mockSecureStorage);
  });

  group('SecureStorageService', () {
    test('init() should initialize deviceId', () async {
      // Arrange
      when(mockSecureStorage.read(key: 'device_id')).thenAnswer((_) async => null);

      // Act
      await secureStorageService.init();

      // Assert
      expect(secureStorageService.deviceId, isNotNull);
    });

    test('logout() should clear all data except deviceId', () async {
      // Arrange
      const testDeviceId = 'test_device_id';
      when(mockSecureStorage.read(key: 'device_id')).thenAnswer((_) async => testDeviceId);
      when(mockSecureStorage.deleteAll()).thenAnswer((_) async {});
      when(mockSecureStorage.write(key: 'device_id', value: testDeviceId)).thenAnswer((_) async {});

      // Act
      await secureStorageService.init();
      await secureStorageService.logout();

      // Assert
      verify(mockSecureStorage.read(key: 'device_id')).called(1);
      verify(mockSecureStorage.deleteAll()).called(1);
      verify(mockSecureStorage.write(key: 'device_id', value: testDeviceId)).called(1);
    });

    test('clearAll() should delete all data', () async {
      // Arrange
      when(mockSecureStorage.deleteAll()).thenAnswer((_) async {});

      // Act
      await secureStorageService.clearAll();

      // Assert
      verify(mockSecureStorage.deleteAll()).called(1);
    });

    test('deviceId.read() should return the stored deviceId', () async {
      // Arrange
      const testDeviceId = 'test_device_id';
      when(mockSecureStorage.read(key: 'device_id')).thenAnswer((_) async => testDeviceId);

      // Act
      await secureStorageService.init();
      final deviceId = await secureStorageService.deviceId.read();

      // Assert
      expect(deviceId, equals(testDeviceId));
      verify(mockSecureStorage.read(key: 'device_id')).called(1);
    });

    test('deviceId.set() should store the deviceId', () async {
      // Arrange
      const testDeviceId = 'test_device_id';
      when(mockSecureStorage.write(key: 'device_id', value: testDeviceId)).thenAnswer((_) async {});

      // Act
      await secureStorageService.init();
      await secureStorageService.deviceId.set(testDeviceId);

      // Assert
      verify(mockSecureStorage.write(key: 'device_id', value: testDeviceId)).called(1);
    });
  });
}